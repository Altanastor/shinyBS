{
    "contents" : "#'@rdname Buttons\n#'@name Buttons\n#'@title Twitter Bootstrap Buttons\n#'  \n#'@description Functions for setting and changing the style, size, and state of \n#'  various buttons in shiny apps.\n#'  \n#'@param session The \\code{session} object passed to function given to \n#'  \\code{shinyServer}\n#'@param inputId Id to assign to the button or button group\n#'@param id The id of the button/button group you want to update\n#'@param \\dots \\code{bsButton()} objects to be added to the button group\n#'@param label For buttons, the text to appear inside the button. For button \n#'  groups, an optional label that will appear above the button group\n#'@param toggle The type of toggle behavior the button group should have (See \n#'  Details)\n#'@param style The bootstrap style the button(s) should take (See Details)\n#'@param size The bootstrap size the button(s) should take (See Details)\n#'@param block Logical indicating whether the button or button group should be a\n#'  block level element (i.e., should it span the width of its parent element)\n#'@param vertical Logical indicating whether the button group should have a \n#'  vertical orientation\n#'@param value The value of the button/button group (See Details)\n#'@param disabled Logical indicating whether the button(s) should be disabled\n#'  \n#'@details \\code{bsActionButton()} creates an action button that behaves just as\n#'a standard shiny action button does. It has the added functionality of being\n#'able to changed its style and size. It can also be disabled/enabled.\\cr\\cr \n#'\\code{toggle} can take a value of either \\code{radio} or \\code{checkbox}.\n#'\\code{radio} will allow only one button in the button group to be selected at\n#'a time. \\code{checkbox} will allow any number of buttons to be selected at a\n#'time. \\cr\\cr \\code{style} can be any of the styles described in the Twitter\n#'Bootstrap 2.3.2 documentation. Acceptable values are currently: primary, info,\n#'success, warning, danger, inverse, or link. Additionally, when calling one of\n#'the update functions, style can be set to \\code{default} to return to the\n#'default button style.\\cr\\cr \\code{size} can be any of the sizes described in\n#'the Twitter Bootstrap 2.3.2 documentation. Accepatble values are currently:\n#'large, small, or mini. Additionally, when calling one of the update functions,\n#'style can be set to \\code{default} to return to the default size.\\cr\\cr For\n#'toggle buttons, \\code{value} can be \\code{TRUE} or \\code{FALSE} and\n#'corresponds to whether the button is currently 'clicked.' For \\code{bsButton},\n#'\\code{value} is used to set the value that will be returned by containing\n#'\\code{bsButtonGroup} object when the button is clicked. For button groups,\n#'\\code{value} is used to set the current value to be returned by the group and\n#'should correspond to values assigned to buttons contained in the button\n#'group.\\cr\\cr \\code{vertical} and \\code{block} for button groups are\n#'experimental. They do not work well together and may not work under all\n#'browsers.\n#'@note Run \\code{bsDemo()} for a live examples of shinyBS functionality.\n#'@author Eric Bailey\n#'@references \\href{http://getbootstrap.com/2.3.2/components.html}{Components of\n#'  Twitter Bootstrap 2.3.2}\n#'@references \\href{http://getbootstrap.com/2.3.2/base-css.html}{Base CSS for\n#'  Twitter Bootstrap 2.3.2}\n#'@examples #Run bsDemo() for examples\n#'@export\nbsButton <- function(inputId, label, value, style = NULL, size = NULL, \n                     block = FALSE, disabled = FALSE) {\n  \n  btn <- tags$button(id = inputId, type = \"button\", class = \"btn sbs-btn\", \n                     label)\n  \n  if(disabled) btn <- tagAddClass(btn, \"disabled\")\n  if(block) btn <- tagAddClass(btn, \"btn-block\")\n  \n  if(!is.null(style)) {\n    inputCheck(style = style, valid = c(\"primary\", \"info\", \"success\", \"warning\", \n                                        \"danger\", \"inverse\", \"link\"))\n    btn <- tagAddClass(btn, paste0(\"btn-\", tolower(style)))\n  }\n  \n  if(!is.null(size)) {\n    inputCheck(size = size, valid = c(\"large\", \"small\", \"mini\"))\n    btn <- tagAddClass(btn, paste0(\"btn-\", tolower(size)))\n  }\n  \n  if(!missing(value)) btn <- tagAddAttribs(btn, 'data-value' = value)\n  \n  return(sbsHead(btn))\n  \n}\n\n#'@rdname Buttons\n#'@export\nbsToggleButton <- function(inputId, label, value = FALSE, style = NULL, \n                           size = NULL, block = FALSE, disabled = FALSE) {\n  \n  btn <- bsButton(inputId, label=label, style=style, size=size, block = block, disabled=disabled)\n\n  btn[[2]] <- tagRemoveClass(btn[[2]], \"sbs-btn\")\n  btn[[2]] <- tagAddClass(btn[[2]], \"sbs-toggle-button\")\n  \n  btn[[2]] <- tagAddAttribs(btn[[2]], 'data-toggle' = \"button\")\n  \n  if(value) btn[[2]] <- tagAddClass(btn[[2]], \"active bs-active\")\n    \n  return(btn)\n  \n}\n\n#'@rdname Buttons\n#'@export\nbsActionButton <- function(inputId, label, style = NULL, size = NULL, block = FALSE,\n                           disabled = FALSE) {\n  \n  btn <- bsButton(inputId, label, style = style, size=size, block = block, disabled=disabled)\n\n  btn[[2]] <- tagRemoveClass(btn[[2]], \"sbs-btn\")\n  btn[[2]] <- tagAddClass(btn[[2]], \"sbs-action-button\")\n  \n  return(btn)\n  \n}\n\n#'@rdname Buttons\n#'@export\nupdateButton <- function(session, id, label = NULL, value = NULL, style = NULL, \n                         size = NULL, block = NULL, disabled = NULL) {\n  \n  data <- dropNulls(list(label = label, value = value, style = style, \n                         size = size, block = block, disabled = disabled))\n  \n  session$sendInputMessage(id, data)\n  \n}\n\n#'@rdname Buttons\n#'@export\nbsButtonGroup <- function(inputId, ..., label, toggle = \"checkbox\", style, size, \n                          value = NULL, disabled = FALSE, block = FALSE, vertical = FALSE) {\n    \n  # Start the button group tag\n  btngrp <- tags$div(id = inputId, class = \"btn-group sbs-button-group\")\n  btns <- list(...)\n\n  if(inputCheck(toggle = toggle, valid = c(\"checkbox\", \"radio\"))) {\n    btngrp <- tagAddAttribs(btngrp, 'data-toggle' = paste0(\"buttons-\", toggle))\n  }\n  \n  if(block) btngrp <- tagAddClass(btngrp, \"btn-block\")\n  if(vertical) btngrp <- tagAddClass(btngrp, \"btn-group-vertical\")\n  \n  if(!missing(style)) {\n    if(inputCheck(style = style, \n                  valid = c(\"primary\", \"info\", \"success\", \"warning\", \n                            \"danger\", \"inverse\", \"link\"))) {\n      style = paste0(\"btn-\", style)\n    }\n  }\n  \n  if(!missing(size)) {\n    if(inputCheck(size = size, valid = c(\"large\", \"small\", \"mini\"))) {\n      size = paste0(\"btn-\", size)\n    }\n  }\n  \n  # Loop through the buttons for the group making neccesary changes\n  for(btn in btns) {\n    \n    btn2 <- btn[[2]]\n    \n    if(disabled) btn2 <- tagAddClass(btn2, \"disabled\")\n\n    btn2$attribs['data-toggle'] <- NULL\n    btn2 <- tagRemoveClass(btn2, \"action-button btn-block toggle-button active\")\n    \n    if(btn2$attribs['data-value'] %in% value) {\n      btn2 <- tagAddClass(btn2, \"active bs-active\")\n    }\n    \n    if(block) btn2$name <- \"span\"\n    \n    if(!missing(size)) {\n      btn2 <- tagRemoveClass(btn2, \"btn-large btn-small btn-mini\")\n      btn2 <- tagAddClass(btn2, size)\n    }\n    \n    if(!missing(style)) {\n      styles <- \"btn-primary btn-info btn-success btn-warning btn-danger btn-inverse btn-link\"\n      btn2 <- tagRemoveClass(btn2, styles)\n      btn2 <- tagAddClass(btn2, style)\n    }\n    \n    btn[[2]] <- btn2\n    \n    btngrp <- tagAppendChild(btngrp, btn)\n    \n  }\n\n  if(!missing(label)) {\n    btngrp <- tagList(tags$label(label, 'for' = inputId), btngrp)\n  }\n  \n  return(sbsHead(btngrp))\n\n}\n\n#'@rdname Buttons\n#'@export\nupdateButtonGroup <- function(session, id, toggle = NULL, style = NULL, \n                              size = NULL, disabled = NULL, value = NULL) {\n  \n  data <- dropNulls(list(toggle = toggle, style = style, size = size, \n                         disabled = disabled, value = value))\n  session$sendInputMessage(id, data)\n  \n}",
    "created" : 1404234205158.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "1548123389",
    "id" : "4D1ED8A7",
    "lastKnownWriteTime" : 1404225140,
    "path" : "C:/R/shinyBS/R/bsButtons.R",
    "project_path" : "R/bsButtons.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}