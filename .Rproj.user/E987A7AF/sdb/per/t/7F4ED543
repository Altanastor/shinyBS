{
    "contents" : "//Makes it so clicking on an <a> tag such as bsNavLink won't return you to the top of the page.\n$(document).ready(function() {\n\n  $('a[href=\"#\"]').click(function(e){\n    e.preventDefault();\n  })\n\n})\n\n//New Input Bindings\n\nvar bsModalBinding = new Shiny.InputBinding();\n$.extend(bsModalBinding, {\n\n  find: function(scope) {\n    return $(scope).find(\".sbs-modal\");\n  },\n  getValue: function(el) {\n    return $(el).hasClass(\"in\");\n  },\n  setValue: function(el, value) {\n    $(el).toggleClass(\"hide\", value);\n  },\n  subscribe: function(el, callback) {\n    $(el).on(\"shown.bsModalBinding hidden.bsModalBinding\", function(e) {\n      callback();\n    })\n  },\n  receiveMessage: function(el, data) {\n    if(data.hasOwnProperty(\"toggle\")) {\n      if(data.toggle) {\n        $(el).modal(\"toggle\");\n      }\n    }\n  },\n  unsubscribe: function(el) {\n    $(el).off(\".bsModalBinding\");\n  },\n  initialize: function(el) {\n    var $trigger = $(\"#\" + $(el).attr(\"data-trigger\"));\n    $trigger.attr(\"data-target\", \"#\" + $(el).attr(\"id\"));\n    $trigger.attr(\"data-toggle\", \"modal\");\n  }\n});\nShiny.inputBindings.register(bsModalBinding);\n\nvar bsButtonBinding = new Shiny.InputBinding();\n$.extend(bsButtonBinding, {\n  find: function(scope) {\n    return $(scope).find(\".sbs-btn\");\n  },\n  getValue: function(el) {\n    return $(el).attr('data-value');\n  },\n  setValue: function(el, value) {\n    $(el).data('val', value);\n  },\n  subscribe: function(el, callback) {\n    $(el).on(\"click.bsButtonBinding\", function(e) {\n        callback();\n    });\n  },\n  getState: function(el) {\n    return { value: this.getValue(el) };\n  },\n  receiveMessage: function(el, data) {\n    updateButtonStyle(el, data);\n  },    \n  unsubscribe: function(el) {\n    $(el).off(\".bsButtonBinding\");\n  } \n});\nShiny.inputBindings.register(bsButtonBinding);\n\n/* Creates a clone of the actionButtonBinding, but with a receiveMessage \nfunction for changing the style, size, etc. of the button. I tried to find a \nway to do this without just copying the input binding but was unsuccessful. */\nvar bsActionButtonInputBinding = new Shiny.InputBinding();\n$.extend(bsActionButtonInputBinding, {\n  find: function(scope) {\n    return $(scope).find(\".sbs-action-button\");\n  },\n  getValue: function(el) {\n    return $(el).data('val') || 0;\n  },\n  setValue: function(el, value) {\n    $(el).data('val', value);\n  },\n  subscribe: function(el, callback) {\n    $(el).on(\"click.bsActionButtonInputBinding\", function(e) {\n      if(!$(el).hasClass(\"disabled\")) {\n        var $el = $(this);\n        var val = $el.data('val') || 0;\n        $el.data('val', val + 1);\n          callback();\n      }})\n  },\n  getState: function(el) {\n    return { value: this.getValue(el) };\n  },\n  receiveMessage: function(el, data) {\n    updateButtonStyle(el, data);\n  },    \n  unsubscribe: function(el) {\n    $(el).off(\".bsActionButtonInputBinding\");\n  } \n});\nShiny.inputBindings.register(bsActionButtonInputBinding)\n\nvar bsToggleButtonBinding = new Shiny.InputBinding();\n$.extend(bsToggleButtonBinding, {\n  find: function(scope) {\n    return $(scope).find(\".sbs-toggle-button\");\n  },\n  getValue: function(el) {\n    return $(el).hasClass(\"bs-active\");\n  },\n  setValue: function(el, value) {\n    $(el).toggleClass(\"active bs-active\", value);\n  },\n  subscribe: function(el, callback) {\n    $(el).on(\"click.bsToggleButtonBinding\", function(e) {\n      if(!$(el).hasClass(\"disabled\")) {\n        $(el).toggleClass(\"bs-active\");\n        callback();\n      } else {\n        //Disabled toggle buttons appear to still toggle invisibly, this makes it to a double toggle so the state remains correct.\n        $(el).toggleClass(\"active\");\n      }\n    });\n  },\n  getState: function(el) {\n    return { value: this.getValue(el) };\n  },\n  receiveMessage: function(el, data) {\n    updateButtonStyle(el, data);\n    if(data.hasOwnProperty(\"value\")) {\n      $(el).toggleClass(\"active bs-active\", data.value);\n    }\n  },    \n  unsubscribe: function(el) {\n    $(el).off(\".bsToggleButtonBinding\");\n  } \n});\nShiny.inputBindings.register(bsToggleButtonBinding);\n\n//Creates an input binding for bsCollapse objects\nvar collapseBinding = new Shiny.InputBinding();\n$.extend(collapseBinding, {\n  find: function(scope) {\n    return $(scope).find(\".accordion\");\n  },\n  getId: function(el) {\n    return Shiny.InputBinding.prototype.getId.call(this, el) || el.name;\n  },\n  getValue: function(el) {\n    var op = $(el).find(\".in\").map(function() {\n      var v = $(this).attr(\"data-value\");\n      if(v == undefined) {\n        v = null;  \n      };\n      return v;\n    }).get();\n    return op;  \n  },\n  \n  receiveMessage: function(el, data) {\n    if(data.hasOwnProperty('multiple')) {\n      if(data.multiple == false) {\n        $(el).find('.collapse').each(function(i, e) {\n          $(this).data('collapse').$parent = $(\"#\" + $(el).attr(\"id\"));\n        })\n      } else {\n        $(el).find('.collapse').each(function(i, e) {\n          $(this).data('collapse').$parent = false;\n        })\n      }\n    }\n    if(data.hasOwnProperty('open')) {\n      if(data.open instanceof Array) {\n        $.each(data.open, function(i, e) {\n          if($(\"#\" + e).data('collapse').$parent == false) {\n            if(!$(\"#\" + e).hasClass(\"in\")) {\n              $(\"#\" + e).collapse('show');\n            }\n          } else {\n            if(!$(\"#\" + data.open[0]).hasClass(\"in\")) {\n              $(\"#\" + data.open[0]).collapse('show');\n            }\n          }\n        })\n      } else {\n        if(!$(\"#\" + data.open).hasClass(\"in\")) {\n          $(\"#\" + data.open).collapse('show');\n        }\n      }\n    }\n    if(data.hasOwnProperty('close')) {\n      if(data.close instanceof Array) {\n        $.each(data.close, function(i, e) {\n          if($(\"#\" + e).hasClass(\"in\")) {\n            $(\"#\" + e).collapse('hide');\n          }\n        })\n      } else {\n        if($(\"#\" + data.close).hasClass(\"in\")) {\n          $(\"#\" + data.close).collapse('hide');\n        }\n      }\n    }\n\n  },\n  \n  initialize: function(el) {\n\n    if($(el).attr('data-multiple') == 'FALSE') {\n      var par = \"#\"+$(el).attr(\"id\")\n    } else {\n      var par = false;\n    }\n    $(el).find(\".collapse\").each(function(i, e) {\n        $(this).collapse({parent: par, toggle: false});\n    })\n    \n  },\n  \n  subscribe: function(el, callback) {\n    $(el).find(\"div.accordion-body\").on(\"shown hidden\", function(e) {\n      callback();\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).find(\"div.accordion-body\").off(\"shown hidden\");\n  }\n\n});\nShiny.inputBindings.register(collapseBinding);\n\n//Creates an input binding for the bsNavDropdown object \nvar dropdownBinding = new Shiny.InputBinding();\n$.extend(dropdownBinding, {\n  find: function(scope) {\n    return $(scope).find(\".sbs-dropdown\");\n  },\n  getId: function(el) {\n    return Shiny.InputBinding.prototype.getId.call(this, el) || el.name;\n  },\n  getValue: function(el) {\n    return $(el).attr(\"data-value\");\n  },\n  setValue: function(el, value) {\n    $(el).attr(\"data-value\", value);\n  },\n  receiveMessage: function(el, data) {\n    if(data.hasOwnProperty('selected')) {\n      $(el).attr(\"data-value\", data.selected)\n    }\n    if(data.hasOwnProperty('label')) {\n      $(el).children(\"a\").html(data.label+\"<b class='caret'></b>\");\n    }\n    if(data.hasOwnProperty('options')) {\n      $(el).children(\"ul.dropdown-menu\").replaceWith(data.options);\n      this.initialize(el);\n    }\n  },\n  subscribe: function(el, callback) {\n    $(el).on(\"click.dropdownBinding\", function(e) {\n      callback();\n    });\n  },\n  initialize: function(el) {\n    $(el).find(\"li\").not(\".divider, .nav-header, .dropdown-submenu\").click(function() {\n      $(this).parents(\".sbs-dropdown\").attr(\"data-value\", $(this).attr(\"data-value\"));\n      $(this).parents(\".sbs-dropdown\").removeClass(\"open\");\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off(\".dropdownBinding\");\n  }\n});\nShiny.inputBindings.register(dropdownBinding);\n\n//Creates input binding for TypeAhead Objects\nvar typeAheadBinding = new Shiny.InputBinding();\n$.extend(typeAheadBinding, {\n  \n    find: function(scope) {\n      return $(scope).find('.sbs-typeahead');\n    },\n    getId: function(el) {\n      return Shiny.InputBinding.prototype.getId.call(this, el) || el.name;\n    },\n    getValue: function(el) {\n      return el.value;\n    },\n    setValue: function(el, value) {                                                                                                                                                                                                                \n      el.value = value;\n    },\n    initialize: function(el) {\n      $(el).typeahead();\n    },\n    subscribe: function(el, callback) {                                               \n      $(el).on('keyup.typeAheadBinding input.typeAheadBinding', function(event) {\n        callback(true);\n      });\n      $(el).on('change.typeAheadBinding', function(event) {\n        callback(false);\n      });\n    },\n    unsubscribe: function(el) {\n      $(el).off('.textInputBinding');\n    },\n    receiveMessage: function(el, data) {\n      \n      if (data.hasOwnProperty('value')) {\n        this.setValue(el, data.value);\n      };\n      if (data.hasOwnProperty('label')) {\n        $(el).parent().find('label[for=' + el.id + ']').text(data.label);\n      };\n      if (data.hasOwnProperty('choices')) {\n        $(el).data('typeahead').source = data.choices;\n      };\n      \n      $(el).trigger('change');\n      \n    },\n    getState: function(el) {\n      return {\n        label: $(el).parent().find('label[for=' + el.id + ']').text(),\n        value: el.value\n      };\n    },\n    getRatePolicy: function() {\n      return {\n        policy: 'debounce',\n        delay: 250\n      };\n    },\n    initialize: function(el) {\n      var $el = $(el);\n      var src = $el.attr(\"data-choices\").split(\"|\");\n      var itm = $el.attr(\"data-items\");\n      var min = $el.attr(\"data-minLength\");\n      $(el).typeahead({source: src, items: itm, minLength: min});\n    }\n\n});\nShiny.inputBindings.register(typeAheadBinding);\n\n//Create Input Binding for bsNavtoggleLink Objects\nvar tLinkBinding = new Shiny.InputBinding();\n$.extend(tLinkBinding, {\n  find: function(scope) {\n    return $(scope).find(\".sbs-toggle\");\n  },\n  getValue: function(el) {\n    return $(el).parent().hasClass(\"active\");\n  },\n  setValue: function(el, value) {\n    $(el).parent().toggleClass(\"active\", value);\n  },\n  getState: function(el) {\n    return {\n      label: $(el).text(),\n      value: $(el).parent().hasClass(\"active\")\n    };\n  },\n  receiveMessage: function(el, data) {\n    if(data.hasOwnProperty(\"value\")) {\n      $(el).parent().toggleClass(\"active\", data.value);\n    };\n    if(data.hasOwnProperty(\"label\")) {\n      $(el).html(data.label);\n    };\n  },\n  initialize: function(el) {\n    $(el).click(function() {\n      $(this).parent().toggleClass(\"active\");\n    })\n  },\n  subscribe: function(el, callback) {\n    $(el).on(\"click.tLinkBinding\", function(event) {\n      callback();\n    })  \n  },\n  unsubscribe: function(el) {\n    $(el).off(\"click.tLinkBinding\");\n  }\n\n});\nShiny.inputBindings.register(tLinkBinding);\n\n//Create Input Binding for bsButtonGroups\nvar buttonGroupBinding = new Shiny.InputBinding();\n  $.extend(buttonGroupBinding, {\n    find: function(scope) {\n      return $(scope).find(\".sbs-button-group\");\n    },\n    getValue: function(el) {\n      var op = $(el).children(\".bs-active\").map(function() {\n        var v = $(this).attr(\"data-value\");\n        if(v == undefined) {\n          v = null;  \n        };\n        return v;\n      }).get();\n      return op;\n    },\n    setValue: function(el, value) {\n      $(el).children(\".bs-active\").removeClass(\"bs-active active\");\n      if(value instanceof Array) {\n        $.each(value, function(i, e) {\n          $(el).children(\"#\" + e).addClass(\"active bs-active\");\n        })\n      } else {\n        $(el).children(\"#\" + value).addClass(\"active bs-active\");\n      }\n    },\n    receiveMessage: function(el, data) {\n      var $el = $(el);\n      if(data.hasOwnProperty(\"toggle\")) {\n        if(data.toggle == \"none\") {\n          $el.removeAttr(\"data-toggle\");\n          $el.children(\".btn\").removeClass(\"bs-active active\");\n        } else {\n          if($(el).attr(\"data-toggle\") == \"buttons-radio\") {\n            $(el).children(\".btn\")\n          }\n          $el.attr(\"data-toggle\", \"buttons-\" + data.toggle);\n        }\n      };\n      if(data.hasOwnProperty(\"style\")) {\n        $el.children(\".btn\").removeClass(\"btn-primary btn-info btn-success btn-warning btn-danger btn-inverse btn-link\");\n        if(data.style != \"default\") {\n          $el.children(\".btn\").addClass(\"btn-\"+data.style);\n        }\n      };\n      if(data.hasOwnProperty(\"size\")) {\n        $el.children(\".btn\").removeClass(\"btn-large btn-small btn-mini\");\n        if(data.size != \"default\") {\n          $el.children(\".btn\").addClass(\"btn-\"+data.size);\n        }\n      };\n      if(data.hasOwnProperty(\"disabled\")) {\n        $el.children(\".btn\").toggleClass(\"disabled\", data.disabled);\n      };\n      if(data.hasOwnProperty(\"value\")) {\n        var val = data.value;\n        $el.children(\".btn\").removeClass(\"active bs-active\");\n        if(val instanceof Array & $el.attr(\"data-toggle\") != \"buttons-radio\") {\n          $.each(val, function(i, e) {\n            $el.children(\".btn[data-value = '\"+e+\"']\").addClass(\"active bs-active\");\n          })\n        } else {\n          if(val instanceof Array & $el.attr(\"data-toggle\") == \"buttons-radio\") {\n            val = val[0];\n          }\n          $el.children(\".btn[data-value = '\"+val+\"']\").addClass(\"active bs-active\");\n        }\n      };\n    },\n    subscribe: function(el, callback) {\n      $(el).children(\".btn\").on(\"click\", function(e) {\n        if(!$(this).hasClass(\"disabled\")) {\n          if($(el).attr(\"data-toggle\") == \"buttons-radio\") {\n            $(el).children(\".btn\").removeClass(\"bs-active\");\n            $(this).addClass(\"bs-active\");\n          } else {\n            $(this).toggleClass(\"bs-active\");\n          }\n          callback();\n        }\n      })\n    },\n    unsubscribe: function(el) {\n      $(el).children(\".btn\").off(\"click\");\n    }\n  });\nShiny.inputBindings.register(buttonGroupBinding);\n\n\n//Support Functions\n\nfunction addPopover(id, title, content, placement, trigger) {\n\n  var $id = $(\"#\"+id)\n  if($id.attr(\"type\") == \"slider\") {\n    $id = $id.parent();\n  }\n  if($id.hasClass(\"selectized\")) {\n    $id = $id.siblings(\"div.selectize-control\");\n  }\n  var $par = $id.parent();\n  if($par.is('[id]')) {\n    var par = $par.attr(\"id\");\n  } else {\n    var par = \"par\" + parseInt(Math.random()*1000000);\n    $par.attr(\"id\", par);\n  }\n\n  $id.popover('destroy');\n  $id.popover({html: true,\n              placement: placement,\n              trigger: trigger,\n              title: title,\n              content: content,\n              container: '#' + par\n              });\n  $id.data(\"popover\")\n};\n\nfunction addTooltip(id, title, placement, trigger) {\n\n  var $id = $(\"#\"+id)\n  if($id.attr(\"type\") == \"slider\") {\n    $id = $id.parent()\n  }\n  if($id.hasClass(\"selectized\")) {\n    $id = $id.siblings(\"div.selectize-control\");\n  }\n  var $par = $id.parent();\n  if($par.is('[id]')) {\n    var par = $par.attr(\"id\");\n  } else {\n    var par = \"par\" + parseInt(Math.random()*1000000);\n    $par.attr(\"id\", par);\n  }\n\n  $id.tooltip('destroy');\n  $id.tooltip({title: title,\n               placement: placement,\n               trigger: trigger,\n               html: true,\n               container: \"#\"+par\n  }); \n    \n};\n\nfunction updateButtonStyle(el, data) {\n  \n  var $el = $(el)\n  if(data.hasOwnProperty(\"label\")) {\n    $el.html(data.label);\n  }\n  if(data.hasOwnProperty(\"style\")) {\n    $el.removeClass(\"btn-primary btn-info btn-success btn-warning btn-danger btn-inverse btn-link\");\n    if(data.style != \"default\") {\n      $el.addClass(\"btn-\"+data.style);\n    }\n  }\n  if(data.hasOwnProperty(\"size\")) {\n    $el.removeClass(\"btn-large btn-small btn-mini\");\n    if(data.size != \"default\") {\n      $el.addClass(\"btn-\"+data.size);\n    }\n  }\n  if(data.hasOwnProperty(\"block\")) {\n    $el.toggleClass(\"btn-block\", data.block);\n  }\n  if(data.hasOwnProperty(\"disabled\")) {\n    $el.toggleClass(\"disabled\", data.disabled);\n  }\n  \n}\n\n\n//New Custom Message Handlers\n\nShiny.addCustomMessageHandler(\"createalert\",\n  function(data) {\n    if(data.hasOwnProperty(\"alertId\")) {\n      var t = $(\"#\" + data.alertId).length;\n    } else {\n      var t = 0;\n    }\n    \n    if(t == 0) {\n      var cl = \"alert\";\n      if(data.hasOwnProperty('type')) {\n        cl = cl+\" alert-\"+data.type;\n      };\n      if(data.hasOwnProperty('block')) {\n        if(data.block == true) {\n          cl = cl+\" alert-block\";\n        }\n      }\n      \n      al = \"<div class='\"+cl+\"'\"\n      \n      if(data.hasOwnProperty('alertId')) {\n        al = al + \" id=\" + data.alertId\n      }\n      \n      al = al+\">\"\n      \n      if(data.dismiss == true) {\n        al = al+\"<button type='button' class='close' data-dismiss='alert'>&times;</button>\";\n      }\n      \n      if(data.hasOwnProperty('title')) {\n        al = al+\"<h4>\"+data.title+\"</h4>\";\n      }\n      \n      al = al + data.message + \"</div>\";\n      \n      if(data.append == true) {\n        $(al).appendTo(\"#\"+data.id);\n      } else {\n        $(\"#\"+data.id).html(al);\n      }\n    }\n  }\n);\n\nShiny.addCustomMessageHandler(\"closealert\",\n  function(alertId) {\n    $(\"#\"+alertId).alert('close');\n  }\n);\n\nShiny.addCustomMessageHandler(\"updateprogress\",\n  function(data) {\n    $el = $(\"#\"+data.id);\n    if(data.hasOwnProperty('value')) {\n      $el.find(\"div.bar\").width(data.value+\"%\");\n    };\n    if(data.hasOwnProperty('visible')) {\n      $el.toggleClass(\"hidden\", !data.visible);\n    };\n    if(data.hasOwnProperty('color')) {\n      $el.removeClass(\"progress-standard progress-info progress-success progress-danger progress-warning\")\n      $el.addClass(\"progress-\"+data.color)\n    };\n    if(data.hasOwnProperty('striped')) {\n      $el.toggleClass('progress-striped', data.striped);\n    };\n    if(data.hasOwnProperty('animate')) {\n      $el.toggleClass('active', data.animate);\n    } \n  }\n);\n\nShiny.addCustomMessageHandler(\"modifynavbar\",\n  function(data) {\n    $el = $(\"#\"+data.id);\n    if(data.hasOwnProperty(\"brand\")) {\n      $el.find(\".brand\").text(data.brand);\n    };\n    if(data.hasOwnProperty(\"fixed\")) {\n      var f = $el.hasClass(\"navbar-fixed-top\")\n      $el.toggleClass(\"navbar-fixed-top\", data.fixed);\n      if($el.hasClass(\"navbar-fixed-top\") && !f) {\n        $(\"body\").css(\"padding-top\", function(i, oV) {\n          return (parseInt(oV)+50)+\"px\";\n        })\n      } else if(!$el.hasClass(\"navbar-fixed-top\") && f){\n        $(\"body\").css(\"padding-top\", function(i, oV) {\n          return (parseInt(oV)-50)+\"px\";\n        })\n      }\n    };\n    if(data.hasOwnProperty(\"inverse\")) {\n      $el.toggleClass(\"navbar-inverse\", data.inverse);\n    };\n  })\n\nShiny.addCustomMessageHandler(\"addtooltip\", \n  function(data) {\n    setTimeout(function() {addTooltip(id=data.id, title=data.title, placement=data.placement, trigger=data.trigger);}, 100);\n  }\n);\n\nShiny.addCustomMessageHandler(\"removetooltip\",\n  function(tooltipid) {\n    $(\"#\"+tooltipid).tooltip(\"destroy\");\n  }\n);\n\nShiny.addCustomMessageHandler(\"addpopover\",\n  function(data) {\n    setTimeout(function() {addPopover(id=data.id, title=data.title, content=data.content, placement=data.placement, trigger=data.trigger);}, 100)\n    \n  }\n);\n\nShiny.addCustomMessageHandler(\"removepopover\",\n  function(popoverid) {\n    $(\"#\"+popoverid).popover(\"destroy\");\n  }\n);\n\n\n// Table Highlighting Functions\nShiny.addCustomMessageHandler(\"highlightCells\", \n  function(data) {\n    \n    var $tab = $(\"#\"+data.id).children(\"table\");\n    var $tds = $tab.find(\"td\");\n    \n    if(data.skip) {\n      $tds = $tab.find(\"td:not(:first-child)\");\n    };\n    \n    if(data.hasOwnProperty(\"column\")) {\n      if($.isNumeric(data.column)) {\n        var ind = parseInt(data.column, 10);\n      } else {\n        var ind = $tab.find(\"tr:first-child\").children(\"th\").filter(function() {\n          return $.trim($(this).text()) == $.trim(data.column);\n        }).index();\n      }\n      $tds = $tab.find(\"tr\").find(\"td:nth-child(\" + (ind + 1) + \")\")\n    }\n        \n    if(data.hasOwnProperty(\"reset\")) {\n      if(data.reset) {\n        $tds.removeClass().removeAttr(\"style\");\n      }\n    }\n    \n    if(data.hasOwnProperty(\"regex\")) {\n      \n      $tds = $tds.filter(function() {\n        return this.textContent.match(data.regex);\n      })\n      \n    } else {\n      if(data.hasOwnProperty(\"min\")) {\n        $tds = $tds.filter(function() {\n          return parseFloat($(this).text(), 10) >= parseFloat(data.min, 10)});\n      }\n      if(data.hasOwnProperty(\"max\")) {\n        $tds = $tds.filter(function() {\n          return parseFloat($(this).text(), 10) <= parseFloat(data.max, 10)});\n      }\n    }\n    \n    if(data.hasOwnProperty(\"class\")) {\n      $tds.removeClass().removeAttr(\"style\").addClass(data.class);\n    }\n    \n    if(data.hasOwnProperty(\"style\")) {\n      $tds.removeAttr(\"style\").attr(\"style\", data.style);\n    }\n  }\n);\n\nShiny.addCustomMessageHandler(\"highlightRows\",\n  function(data) {\n  \n    var $tab = $(\"#\"+data.id).children(\"table\");\n    if($.isNumeric(data.column)) {\n      var ind = parseInt(data.column, 10);\n    } else {\n      var ind = $tab.find(\"tr:first-child\").children(\"th\").filter(function() {\n        return $.trim($(this).text()) == $.trim(data.column);\n      }).index();\n    }\n    \n    var $trs = $tab.find(\"tr:not(:first-child)\")\n\n    if(data.hasOwnProperty(\"reset\")) {\n      if(data.reset) {\n        $trs.removeClass().removeAttr(\"style\");\n        $trs.children(\"td\").removeClass().removeAttr(\"style\")\n      }\n    }\n    \n    if(data.hasOwnProperty(\"regex\")) {\n      \n      $trs = $trs.filter(function() {\n        return $(this).children(\"td\").eq(ind).get(0).textContent.match(data.regex);\n      })\n      \n    } else {\n      \n      if(data.hasOwnProperty(\"min\")) {\n        $trs = $trs.filter(function() {\n          return parseFloat($(this).children(\"td\").eq(ind).text(), 10) >= parseFloat(data.min, 10)});\n      }\n      \n      if(data.hasOwnProperty(\"max\")) {\n        $trs = $trs.filter(function() {\n          return parseFloat($(this).children(\"td\").eq(ind).text(), 10) <= parseFloat(data.max, 10)});\n      }\n      \n    }\n    \n    if(data.hasOwnProperty(\"class\")) {\n      $trs.children(\"td\").removeClass().removeAttr(\"style\");\n      $trs.removeClass().removeAttr(\"style\").addClass(data.class);\n    }\n    if(data.hasOwnProperty(\"style\")) {\n      $trs.children(\"td\").removeAttr(\"style\");\n      $trs.removeAttr(\"style\").attr(\"style\", data.style);\n    }\n\n})",
    "created" : 1404234241540.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2939382780",
    "id" : "7F4ED543",
    "lastKnownWriteTime" : 1404225140,
    "path" : "C:/R/shinyBS/inst/www/shinyBS.js",
    "project_path" : "inst/www/shinyBS.js",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "js"
}