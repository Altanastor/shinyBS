for(i in seq(lenth(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
}
ddm <- tagAppendChild(ddm, ddi)
ddm
i = 2
choice <- choices[i]
cname <- names(choice)
if(is.null(cname)) cname <- ""
if(cname == "") cname = choice[[1]]
if(length(choice[[1]]) == 1) {
if(is.na(choice[[1]])) {
ddi <- tags$li(class = "divider")
} else {
ddi <- tags$li("data-value" = choice[[1]], tags$a(tabindex = "-1", href = "", cname))
}
} else if(length(choice[[1]]) > 1) {
ddi < - tags$li(class = "dropdown-submenu",
tags$a(tabindex = "-1", href = "#", cname))
sdd <- tags$ul(class = "dropdown-menu")
for(i in seq(lenth(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
}
ddm <- tagAppendChild(ddm, ddi)
ddm
i = 3
choice <- choices[i]
cname <- names(choice)
if(is.null(cname)) cname <- ""
if(cname == "") cname = choice[[1]]
if(length(choice[[1]]) == 1) {
if(is.na(choice[[1]])) {
ddi <- tags$li(class = "divider")
} else {
ddi <- tags$li("data-value" = choice[[1]], tags$a(tabindex = "-1", href = "", cname))
}
} else if(length(choice[[1]]) > 1) {
ddi < - tags$li(class = "dropdown-submenu",
tags$a(tabindex = "-1", href = "#", cname))
sdd <- tags$ul(class = "dropdown-menu")
for(i in seq(lenth(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
}
ddm <- tagAppendChild(ddm, ddi)
ddm
processChoice <- function(choice) {
cname <- names(choice)
if(is.null(cname)) cname <- ""
if(cname == "") cname = choice[[1]]
if(length(choice[[1]]) == 1) {
if(is.na(choice[[1]])) {
ddi <- tags$li(class = "divider")
} else {
ddi <- tags$li("data-value" = choice[[1]], tags$a(tabindex = "-1", href = "", cname))
}
} else if(length(choice[[1]]) > 1) {
ddi < - tags$li(class = "dropdown-submenu",
tags$a(tabindex = "-1", href = "#", cname))
sdd <- tags$ul(class = "dropdown-menu")
for(i in seq(lenth(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
}
return(ddi)
}
i = 4
choice <- choices[i]
cname <- names(choice)
if(is.null(cname)) cname <- ""
if(cname == "") cname = choice[[1]]
length(choice[[1]]) == 1
length(choice[[1]]) > 1
ddi < - tags$li(class = "dropdown-submenu",
tags$a(tabindex = "-1", href = "#", cname))
sdd <- tags$ul(class = "dropdown-menu")
for(i in seq(lenth(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
ddi < - tags$li(class = "dropdown-submenu",
tags$a(tabindex = "-1", href = "#", cname))
sdd <- tags$ul(class = "dropdown-menu")
for(i in seq(length(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
ddi <- tags$li(class = "dropdown-submenu",
tags$a(tabindex = "-1", href = "#", cname))
sdd <- tags$ul(class = "dropdown-menu")
for(i in seq(length(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
ddi
# Creates a dropdown shiny input that returns the value of the last dropdown element clicked
processChoice <- function(choice) {
cname <- names(choice)
if(is.null(cname)) cname <- ""
if(cname == "") cname = choice[[1]]
if(length(choice[[1]]) == 1) {
if(is.na(choice[[1]])) {
ddi <- tags$li(class = "divider")
} else {
ddi <- tags$li("data-value" = choice[[1]], tags$a(tabindex = "-1", href = "", cname))
}
} else if(length(choice[[1]]) > 1) {
ddi <- tags$li(class = "dropdown-submenu",
tags$a(tabindex = "-1", href = "#", cname))
sdd <- tags$ul(class = "dropdown-menu")
for(i in seq(length(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
}
return(ddi)
}
bsNavDropDown <- function(inputId, label, choices, selected="") {
#If label isn't already a shiny tag make it HTML
if(!inherits(label, "shiny.tag")) label <- HTML(label)
# Start the dropdown HTML
dd <- tags$li(id = inputId, class = "dropdown sbs-dropdown", "data-value" = selected,
tags$a(href="#", class = "dropdown-toggle", "data-toggle" = "dropdown", label, tags$b(class = "caret")))
ddm <- tags$ul(class = "dropdown-menu")
for(i in seq(length(choices))) {
ddm <- tagAppendChild(ddm, processChoice(choices[i]))
}
return(tagAppendChild(dd, ddm)
}
# Creates a dropdown shiny input that returns the value of the last dropdown element clicked
processChoice <- function(choice) {
cname <- names(choice)
if(is.null(cname)) cname <- ""
if(cname == "") cname = choice[[1]]
if(length(choice[[1]]) == 1) {
if(is.na(choice[[1]])) {
ddi <- tags$li(class = "divider")
} else {
ddi <- tags$li("data-value" = choice[[1]], tags$a(tabindex = "-1", href = "", cname))
}
} else if(length(choice[[1]]) > 1) {
ddi <- tags$li(class = "dropdown-submenu",
tags$a(tabindex = "-1", href = "#", cname))
sdd <- tags$ul(class = "dropdown-menu")
for(i in seq(length(choice[[1]]))) {
sdd <- tagAppendChild(sdd, processChoice(choice[[1]][i]))
}
ddi <- tagAppendChild(ddi, sdd)
}
return(ddi)
}
bsNavDropDown <- function(inputId, label, choices, selected="") {
#If label isn't already a shiny tag make it HTML
if(!inherits(label, "shiny.tag")) label <- HTML(label)
# Start the dropdown HTML
dd <- tags$li(id = inputId, class = "dropdown sbs-dropdown", "data-value" = selected,
tags$a(href="#", class = "dropdown-toggle", "data-toggle" = "dropdown", label, tags$b(class = "caret")))
ddm <- tags$ul(class = "dropdown-menu")
for(i in seq(length(choices))) {
ddm <- tagAppendChild(ddm, processChoice(choices[i]))
}
return(tagAppendChild(dd, ddm)
}
choices <- list("Action" = "act1", "Another Action" = "act2", NA, "SubActions" = list("Subaction" = "sact1", "Another Subaction" = "sact2", "Yet Another" = "sact3"))
bsNavDropDown("id", "Testing", choices)
bsNavDropDown <- function(inputId, label, choices, selected="") {
#If label isn't already a shiny tag make it HTML
if(!inherits(label, "shiny.tag")) label <- HTML(label)
# Start the dropdown HTML
dd <- tags$li(id = inputId, class = "dropdown sbs-dropdown", "data-value" = selected,
tags$a(href="#", class = "dropdown-toggle", "data-toggle" = "dropdown", label, tags$b(class = "caret")))
ddm <- tags$ul(class = "dropdown-menu")
for(i in seq(length(choices))) {
ddm <- tagAppendChild(ddm, processChoice(choices[i]))
}
return(tagAppendChild(dd, ddm)
}
bsNavDropDown <- function(inputId, label, choices, selected="") {
#If label isn't already a shiny tag make it HTML
if(!inherits(label, "shiny.tag")) label <- HTML(label)
# Start the dropdown HTML
dd <- tags$li(id = inputId, class = "dropdown sbs-dropdown", "data-value" = selected,
tags$a(href="#", class = "dropdown-toggle", "data-toggle" = "dropdown", label, tags$b(class = "caret")))
ddm <- tags$ul(class = "dropdown-menu")
for(i in seq(length(choices))) {
ddm <- tagAppendChild(ddm, processChoice(choices[i]))
}
return(tagAppendChild(dd, ddm))
}
bsNavDropDown("id", "Testing", choices)
library(shinyBS)
library(shinyBS)
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
bsDemo()
install.packages("shinyBS")
install.packages("shinyBS")
bsDemo()
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
prompt(bsMedia)
library(shinyBS)
library(shinyBS)
library(shinyBS)
bsDemo()
library(devtools)
?instal_github
?install_github
remove.packages("shinyBS")
install_github("shinyBS", "ebailey78")
remove.packages("shinyBS")
install_github("shinyBS", "ebaily78", ref = "modal")
install_github("shinyBS", "ebailey78", ref = "modal")
library(shinyBS)
bsNavDemo()
library(shinyBS)
bsNavDemo()
x <- list(a = 1, b = 2, c = list(d = 3, e = 4), f = list(g = 5))
x
class(x$a)
class(x$c)
class(x$f)
library(shinyBS)
library(shinyBS)
x
class(x$a)
class(x["a"])
class(x[["a"]])
str(x$a)
str(x["a"])
str(x["b"])
str(x["c"])
str(x[["c"]])
str(x[["a"]])
y <- str(x[["c"]])
y
is.list(x$a)
is.list(x$c)
is.list(x$d)
is.list(x$f)
library(shinyBS)
choice = x[[1]]
is.list(choice[[1]])
choice = x[1]
is.list(choice[[1]])
choice = x[2]
is.list(choice[[1]])
choice = x[3]
is.list(choice[[1]])
library(shinyBS)
library(shinyBS)
bsNavDemo()
library(shinyBS)
install.packages("maps")
map("state")
library(map)
library(maps)
map("state")
map("state", "Indiana")
map("county", "Indiana")
map("state", "Indiana", add=TRUE)
library(shinyBS)
library(shiny)
runApp()
x <- list("A", "B", "C", NA)
x
names(x) <- x
x
names(x)[4] = NULL
names(x)[4] = ""
x
is.na(names(x))
x <- list("A", "B", "C", NA)
names(x) <- x
is.na(names(x))
names(x)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
x <- function(...) {}
x <- function(...) {length(list(...))}
x
x()
x(1,2,3)
library(shinyBS)
bsConDemo()
library(shinyBS)
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
x <- HTML("<p>Hello</p>")
x
class(x)
HTML(x)
y <- tags$p("Hello")
y
class(y)
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo().
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
bsConDemo()
library(shinyBS)
runApp(port = 3169)
library(shinyBS)
?runApp
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
library(shinyBS)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
library(shinyBS)
runApp(port = 3169, launch.browser = FALSE)
