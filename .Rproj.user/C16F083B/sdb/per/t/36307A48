{
    "contents" : "#'Alerts\n#'\n#'Alerts allow you to communicate information to the user on the fly. Standard\n#'Bootstrap styling options give the user a hint at the type of information\n#'contained in the Alert.\n#'\n#'@section Components:\n#'There are three functions in the Alerts family: \n#'  \\describe{\n#'    \\item{\\code{\\link{bsAlert}}}{Used in the UI to create an anchor where your\n#'      Alerts will be displayed.}\n#'    \\item{\\code{\\link{createAlert}}}{Used in the Server logic to create\n#'      alerts. This would be used within a reactive context to display error \n#'      or success messages to the user based on the status of that context.}\n#'    \\item{\\code{\\link{closeAlert}}}{Used in the Server logic to close an alert\n#'      that is already open. By default, Alerts are dismissable by the user,\n#'      but this offers you a way to close them programmatically.}\n#'  }\n#'      \n#'@details\n#'To create alerts in your Shiny app you must place \\code{bsAlert} in your ui.\n#'This serves as an anchor that tells shinyBS where to place the alerts created\n#'with \\code{createAlert}. \n#'\n#'Use \\code{createAlert} in your server script to add alerts to the anchor \n#'you created with \\code{bsAlert} in your ui. You can place \\code{createAlert}\n#'in observers, reactives, or outputs. A common usage may be to have logic that\n#'validates a user's inputs. If they are valid produce the requested output, if\n#'not use \\code{createAlert} to give the user info about what they need to \n#'change.\n#'\n#'@section Changes:\n#'\\code{style} was called \\code{type} in previous versions of shinyBS.\n#'\n#'\\code{anchorId} was called \\code{inputId} in previous versions of shinyBS.\n#'\n#'\\code{content} was called \\code{message} in previous versions of shinyBS.\n#' \n#'@examples\n#'\\donttest{\n#'library(shiny)\n#'library(shinyBS)\n#'shinyApp(\n#'  ui = fluidPage(\n#'    sidebarLayout(\n#'      sidebarPanel(textInput(\"num1\", NULL, value = 100), \n#'        \"divided by\", textInput(\"num2\", NULL, value = 20), \n#'        \"equals\", textOutput(\"exampleOutput\")),\n#'      mainPanel(\n#'        bsAlert(\"alert\")\n#'      )\n#'    )\n#'  ),\n#'  server = function(input, output, session) {\n#'    output$exampleOutput <- renderText({\n#'      num1 <- as.numeric(input$num1)\n#'      num2 <- as.numeric(input$num2)\n#'    \n#'      if(is.na(num1) | is.na(num2)) {\n#'        createAlert(session, \"alert\", \"exampleAlert\", title = \"Oops\", \n#'          content = \"Both inputs should be numeric.\", append = FALSE)\n#'      } else if(num2 == 0) {\n#'        createAlert(session, \"alert\", \"exampleAlert\", title = \"Oops\", \n#'          content = \"You cannot divide by 0.\", append = FALSE)\n#'      } else {\n#'        closeAlert(session, \"exampleAlert\")\n#'        return(num1/num2)\n#'      }\n#'    \n#'    })    \n#'  }\n#')\n#'}\n#'@templateVar item_name Alerts\n#'@templateVar family_name Alerts\n#'@template footer\nNULL",
    "created" : 1425658982231.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "88211814",
    "id" : "36307A48",
    "lastKnownWriteTime" : 1425585829,
    "path" : "C:/R/shinyBS/R/Alerts.R",
    "project_path" : "R/Alerts.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}