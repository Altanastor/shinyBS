{
    "contents" : "#'Buttons\n#'\n#'Twitter Bootstrap gives many options for styling buttons that aren't made \n#'available by standard Shiny. Use shinyBS to create buttons of different sizes,\n#'shapes, and colors.\n#'\n#'@section Components:\n#'There are two functions in the Buttons family: \n#'  \\describe{\n#'    \\item{\\code{\\link{bsButton}}}{Used in the UI to create a button. Buttons \n#'    can be of the type \\code{action} or \\code{toggle}.}\n#'    \\item{\\code{\\link{updateButton}}}{Used in the Server logic to modify the\n#'    state of a button created with \\code{\\link{bsButton}}}\n#'  }\n#'      \n#'@details\n#'Create a button in the UI with \\code{\\link{bsButton}}. If \\code{type = \"action\"}\n#'the button will behave like the standard \\code{\\link{actionButton}} in shiny.\n#'If \\code{type = \"toggle\"} the button will behave like a \\code{\\link{checkboxInput}}\n#'with an on and off state. It will return \\code{TRUE} or \\code{FALSE} to the Server\n#'depending on its state.\n#'\n#'You can update the style and state of a \\code{\\link{bsButton}} from the Server \n#'logic with \\code{\\link{updateButton}}. For example, a button could be set to\n#'\\code{disabled = TRUE} until the user has made some other selections, then once\n#'those selections have been made, an observer on the Server could use \\code{\\link{updateButton}}\n#'to enable the button allowing the user to proceed. Alternatively, you could set\n#'the button to \\code{style = \"success\"} to let them know that the button is ready\n#'to be clicked.\n#'\n#'@section Changes:\n#'\\code{bsActionButton} and \\code{bsToggleButton} were replaced with just \n#'\\code{\\link{bsButton}} with a \\code{type} argument.\n#'\n#'\\code{icon} was added to allow placing an icon in the button.\n#' \n#'@examples\n#'\\donttest{\n#'library(shiny)\n#'library(shinyBS)\n#'shinyApp(\n#'  ui = fluidPage(\n#'    sidebarLayout(\n#'      sidebarPanel(\n#'        sliderInput(\"bins\",\n#'                    \"Move the slider to see its effect on the button below:\",\n#'                    min = 1,\n#'                    max = 50,\n#'                    value = 1),\n#'        bsButton(\"actTwo\", label = \"Click me if you dare!\", icon = icon(\"ban\")),\n#'        tags$p(\"Clicking the first button below changes the disabled state of the second button.\"),\n#'        bsButton(\"togOne\", label = \"Toggle 'Block Action Button' disabled status\", block = TRUE, type = \"toggle\", value = TRUE),\n#'        bsButton(\"actOne\", label = \"Block Action Button\", block = TRUE)\n#'        \n#'      ),\n#'      mainPanel(\n#'        textOutput(\"exampleText\")\n#'      )\n#'    )  \n#'  ),\n#'  server = function(input, output, session) {\n#'    observeEvent(input$togOne, ({\n#'      updateButton(session, \"actOne\", disabled = !input$togOne)\n#'    }))\n#'    observeEvent(input$bins, ({\n#'      \n#'      b <- input$bins\n#'      disabled = NULL\n#'      style = \"default\"\n#'      icon = \"\"\n#'      \n#'      if(b < 5) {\n#'        disabled = TRUE\n#'        icon <- icon(\"ban\")\n#'      } else {\n#'        disabled = FALSE\n#'      }\n#'      \n#'      if(b < 15 | b > 35) {\n#'        style = \"danger\"\n#'      } else if(b < 20 | b > 30) {\n#'        style = \"warning\"\n#'      } else {\n#'        style = \"default\"\n#'        icon = icon(\"check\")\n#'      }\n#'      \n#'      updateButton(session, \"actTwo\", disabled = disabled, style = style, icon = icon)\n#'      \n#'    }))\n#'    \n#'    output$exampleText <- renderText({\n#'      input$actTwo\n#'      b <- isolate(input$bins)\n#'      txt = \"\"\n#'      if((b > 5 & b < 15) | b > 35) {\n#'        txt = \"That was dangerous.\"\n#'      } else if((b > 5 & b < 20) | b > 30) {\n#'        txt = \"I warned you about that.\"\n#'      } else if(b >= 20 &  b <= 30) {\n#'        txt = \"You have choosen... wisely.\"\n#'      }\n#'      return(txt)\n#'    })\n#'  }\n#')\n#'}\n#'@templateVar item_name Buttons\n#'@templateVar family_name Buttons\n#'@template footer\nNULL",
    "created" : 1425650920706.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1839234915",
    "id" : "1CC7A9BE",
    "lastKnownWriteTime" : 1425665571,
    "path" : "C:/R/shinyBS/R/Buttons.R",
    "project_path" : "R/Buttons.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}