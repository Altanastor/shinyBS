{
    "contents" : "context(\"Alerts\")\n\nappDir = file.path(system.file(package = \"shinyBS\"), \"tests\", \"alerts\")\n\nsource(file.path(appDir, \"global.R\"))\n\nremoteApp <- runRemoteApp(appDir = appDir, port = 5000, launch.browser = FALSE)\n\nremDr <- remoteDriver()\nremDr$open(silent = TRUE)\nremDr$navigate(\"http:127.0.0.1:5000\")\n\n#Convenience Functions\nid <- findElement(remDr, \"id\")\ncss <- findElement(remDr, \"css selector\")\n\ntest_that(\"can connect to app\", {\n  appTitle <- remDr$getTitle()[[1]]\n  expect_equal(appTitle, \"shinyBS Alerts Test\")\n})\n\ntest_that(\"alert anchors created\", {\n  \n  expect_true(elementExists(remDr, \"alert1\"))\n  expect_true(elementExists(remDr, \"alert2\"))\n  expect_false(elementExists(remDr, \"alert3\"))\n  \n  expect_equal(getTag(id(\"alert1\")), \"div\")\n  expect_equal(getTag(id(\"alert2\")), \"div\")\n  expect_true(hasClass(id(\"alert1\"), \"tbs-alert\"))\n  expect_true(hasClass(id(\"alert2\"), \"tbs-alert\"))\n  \n})\n\ntest_that(\"Alerts created on load\", {\n  for(r in seq(nrow(g))) {\n    aid <- paste(g[r, 1], g[r, 2], g[r, 3], sep = \"_\")\n    expect_true(elementExists(remDr, aid), label = aid, info = \"existence check\")\n    expect_true(hasClass(id(aid), paste0(\"alert-\", types[g[r, 2]])), label = aid, info = \"style check\")\n    expect_equal(childExists(id(aid), \"css selector\", \"button.close\"), g[r, 3], label = aid, info = paste(\"dismiss check:\", g[r, 3]))\n  }\n})\n\ntest_that(\"Alerts created after load\", {\n  \n  # First test to make sure batch 4 doesn't already exist\n  for(r in seq(nrow(g))) {\n    aid <- paste(\"post\", g[r, 1], g[r, 2], g[r, 3], sep = \"_\")\n    expect_false(elementExists(remDr, aid), label = aid, info = \"non-existence check\")\n  }\n  \n  # Click the button that creates the new alerts\n  id(\"but1\")$clickElement()\n  \n  Sys.sleep(0.5)\n  \n  # Check if alert exists now\n  for(r in seq(nrow(g))) {\n    aid <- paste(\"post\", g[r, 1], g[r, 2], g[r, 3], sep = \"_\")\n    expect_true(elementExists(remDr, aid), label = aid, info = \"existence check\")\n    expect_true(hasClass(id(aid), paste0(\"alert-\", types[g[r, 2]])), label = aid, info = \"style check\")\n    expect_equal(childExists(id(aid), \"css selector\", \"button.close\"), g[r, 3], label = aid, info = paste(\"dismiss check:\", g[r, 3]))\n  }\n  \n})\n\ntest_that(\"closeAlert works\", {\n  \n  # Check if alert still exist\n  for(r in seq(nrow(g))) {\n    aid <- paste(\"post\", g[r, 1], g[r, 2], g[r, 3], sep = \"_\")\n    expect_true(elementExists(remDr, aid), label = aid, info = \"existence check\")\n    expect_true(hasClass(id(aid), paste0(\"alert-\", types[g[r, 2]])), label = aid, info = \"style check\")\n    expect_equal(childExists(id(aid), \"css selector\", \"button.close\"), g[r, 3], label = aid, info = paste(\"dismiss check:\", g[r, 3]))\n  }\n  \n  # Click the button that closes the alerts\n  id(\"but2\")$clickElement()\n  \n  # Check if the new alerts have disappeared but not the old\n  for(r in seq(nrow(g))) {\n    aid <- paste(g[r, 1], g[r, 2], g[r, 3], sep = \"_\")\n    expect_false(elementExists(remDr, paste0(\"post_\", aid)), label = aid, info = \"non-existence check\")\n    expect_true(elementExists(remDr, aid), label = aid, info = \"existence check\")\n  }\n  \n})\n\ntest_that(\"close button works\", {\n  g2 <- g[g[,3] == TRUE, ]\n  for(r in seq(nrow(g2))) {\n    aid <- paste(g[r, 1], g[r, 2], g[r, 3], sep = \"_\")\n    if(elementExists(remDr, aid)) {\n      expect_true(elementExists(remDr, aid), label = aid, info = \"pre-check\")\n      findChild(\"css selector\")(id(aid), \"button.close\")$clickElement()\n      expect_false(elementExists(remDr, aid), label = aid, info = \"post-check\")      \n    }\n  }\n})\n\ntest_that(\"append works\", {\n  \n  a2 <- id(\"alert2\")\n  id(\"but2\")$clickElement()\n  start <- length(findChildren(\"css selector\")(a2, \"div.alert\"))\n  id(\"but1\")$clickElement()\n  expect_more_than(length(findChildren(\"css selector\")(a2, \"div.alert\")), start)\n  id(\"but3\")$clickElement()\n  expect_equal(length(findChildren(\"css selector\")(a2, \"div.alert\")), 1)\n\n})\n\ntest_that(\"textInput alert\", {\n  txt <- id(\"text1\")\n  #Make Sure textInput is empty\n  txt$clearElement()\n  expect_true(hasClass(id(\"text_test\"), \"alert-info\"))\n  txt$sendKeysToElement(list(\"50\"))\n  Sys.sleep(0.5)\n  expect_true(hasClass(id(\"text_test\"), \"alert-danger\"))\n  txt$sendKeysToElement(list(\"0\"))\n  Sys.sleep(0.5)\n  expect_true(hasClass(id(\"text_test\"), \"alert-success\"))\n})\n\n\n\nremDr$close()\nclose(remoteApp)\n",
    "created" : 1403747031628.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2918929508",
    "id" : "F376622A",
    "lastKnownWriteTime" : 1404093567,
    "path" : "~/GitHub/shinyBS/inst/tests/tests_alert.R",
    "project_path" : "inst/tests/tests_alert.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}