shiny::runApp('inst/demo')
remove.packages("shinyBS")
library(shinyBS)
shiny::runApp('inst/demo')
library(shinyBS)
shiny::runApp()
library(shinyBS)
shiny::runApp('inst/demo')
shiny::runApp('inst/demo')
shiny::runApp('inst/demo')
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
shiny::runApp()
library(shinyBS)
shiny::runApp()
library(shinyBS)
shiny::runApp()
shiny::runApp()
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
devtools::install_github("ebailey78/shinyBS", ref = "shinyBS3-new")
devtools::install_github("ebailey78/shinyBS", ref = "shinyBS3-new")
devtools::install_github("ebailey78/shinyBS", ref = "shinyBS3-new")
appDir = file.path(system.file(package = "shinyBS"), "tests", "bsAlert")
source(file.path(appDir, "global.R"))
shinyapps::deployApp()
appDir = file.path(system.file(package = "shinyBS"), "tests", "bsAlert")
shinyapps::deployApp(appDir)
shiny::runApp('inst/tests/bsAlert')
shinyapps::deployApp(appDir)
library(shinyBS)
devtools::install_github("ebailey78/shinyBS", ref = "shinyBS3-new")
appDir = file.path(system.file(package = "shinyBS"), "tests", "bsAlert")
shinyapps::deployApp(appDir)
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
remDr$open()
silent = TRUE
remDr$open(silent = TRUE)
context("Alerts")
library(testthat)
context("Alerts")
devtools::install_github("ebailey78/shinyBS", ref = "shinyBS3-new")
appDir = file.path(system.file(package = "shinyBS"), "tests", "bsAlert")
source(file.path(appDir, "global.R"))
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
remDr$navigate("https://ebailey78.shinyapps.io/bsAlert/")
install.packages(c("boot", "class", "cluster", "fastcluster", "Hmisc", "KernSmooth", "manipulate", "matrixStats", "nnet", "Rcpp", "rmarkdown", "rpart", "shiny", "shinybootstrap2", "spatial"))
appDir = file.path(system.file(package = "shinyBS"), "tests", "bsAlert")
# shinyapps::deployApp(appDir)
source(file.path(appDir, "global.R"))
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
remDr <- RSelenium::remoteDriver(port = 2015)
remDr$open(silent = TRUE)
startServer()
RSelenium::startServer()
RSelenium::checkForServer()
remDr <- RSelenium::remoteDriver(port = 2015)
remDr$open(silent = TRUE)
RSelenium::startServer()
remDr <- RSelenium::remoteDriver(port = 2015)
remDr$open(silent = TRUE)
remDr$navigate("https://ebailey78.shinyapps.io/bsAlert/")
library("RSelenium", lib.loc="C:/Program Files/R/R-3.1.2/library")
RSelenium::startServer()
remDr <- RSelenium::remoteDriver(port = 2015)
remDr$open(silent = TRUE)
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
remDr$navigate("https://ebailey78.shinyapps.io/bsAlert/")
#Convenience Functions
id <- findElement(remDr, "id")
source('C:/R/shinyBS/inst/tests/helper_b_functions.R')
id <- findElement(remDr, "id")
css <- findElement(remDr, "css selector")
test_that("can connect to app", {
appTitle <- remDr$getTitle()[[1]]
expect_equal(appTitle, "shinyBS Alerts Test")
})
library("testthat", lib.loc="C:/Program Files/R/R-3.1.2/library")
test_that("can connect to app", {
appTitle <- remDr$getTitle()[[1]]
expect_equal(appTitle, "shinyBS Alerts Test")
})
test_that("alert anchors created", {
expect_true(elementExists(remDr, "alert1"))
expect_true(elementExists(remDr, "alert2"))
expect_false(elementExists(remDr, "alert3"))
expect_equal(getTag(id("alert1")), "div")
expect_equal(getTag(id("alert2")), "div")
expect_true(hasClass(id("alert1"), "tbs-alert"))
expect_true(hasClass(id("alert2"), "tbs-alert"))
})
context("Alerts")
# devtools::install_github("ebailey78/shinyBS", ref = "shinyBS3-new")
appDir = file.path(system.file(package = "shinyBS"), "tests", "bsAlert")
# shinyapps::deployApp(appDir)
source(file.path(appDir, "global.R"))
source(file.path(appDir, "global.R"))
RSelenium::startServer()
remDr <- RSelenium::remoteDriver()
remDr$open(silent = TRUE)
remDr$navigate("https://ebailey78.shinyapps.io/bsAlert/")
id <- findElement(remDr, "id")
css <- findElement(remDr, "css selector")
test_that("can connect to app", {
appTitle <- remDr$getTitle()[[1]]
expect_equal(appTitle, "shinyBS Alerts Test")
})
test_that("alert anchors created", {
expect_true(elementExists(remDr, "alert1"))
expect_true(elementExists(remDr, "alert2"))
expect_false(elementExists(remDr, "alert3"))
expect_equal(getTag(id("alert1")), "div")
expect_equal(getTag(id("alert2")), "div")
expect_true(hasClass(id("alert1"), "tbs-alert"))
expect_true(hasClass(id("alert2"), "tbs-alert"))
})
expect_true(elementExists(remDr, "alert1"))
expect_true(elementExists(remDr, "alert2"))
expect_false(elementExists(remDr, "alert3"))
elementExists(remDr, "alert1")
elementExists(remDr, "alert2")
elementExists(remDr, "alert3")
shiny::runApp('inst/bsDemo')
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
library(shinyBS)
shiny::runApp()
library(shinyBS)
shiny::runApp()
library(shinyBS)
shiny::runApp()
shiny::runApp()
library(shinyBS)
shiny::runApp()
library(shinyBS)
shiny::runApp()
library(shinyBS)
shiny::runApp()
"o" %in% "open"
"open" %in% "open"
seq(length(panels))
i=1
getAttribs(panels[[i]])$value
source('C:/R/shinyBS/R/misc.R')
getAttribs(panels[[i]])$value
shiny::runApp()
shiny::runApp('inst/bsDemo')
library(shinyBS)
shiny::runApp()
library(shinyBS)
library(shinyBS)
library(shinyBS)
shinyapp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num", "Enter a number")),
mainPanel(
bsAlert("alert"),
textOutput("exampleOutput")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
return(input$num)
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num", "Enter a number")),
mainPanel(
bsAlert("alert"),
textOutput("exampleOutput")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
return(input$num)
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num", "Enter a number")),
mainPanel(
bsAlert("alert"),
textOutput("exampleOutput")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
num <- input$num
if(num == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.", style = "error", append = FALSE)
} else {
return(100 / input$num)
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num", "Enter a number")),
mainPanel(
bsAlert("alert"),
textOutput("exampleOutput")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
num <- input$num
if(!is.numeric(num)) {
createAlert(session, "alert", title = "Oops", content = "You must enter a number", style = "error", append = FALSE)
} else if(num == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.", style = "error", append = FALSE)
} else {
return(100 / input$num)
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num", "Enter a number")),
mainPanel(
bsAlert("alert"),
textOutput("exampleOutput")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
num <- input$num
if(!is.numeric(num)) {
createAlert(session, "alert", title = "Oops", content = "You must enter a number", style = "danger", append = FALSE)
} else if(num == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.", style = "danger", append = FALSE)
} else {
return(100 / input$num)
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num", "Enter a number")),
mainPanel(
bsAlert("alert"),
textOutput("exampleOutput")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
num <- as.numeric(input$num)
if(!is.numeric(num)) {
createAlert(session, "alert", title = "Oops", content = "You must enter a number", style = "danger", append = FALSE)
} else if(num == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.", style = "danger", append = FALSE)
} else {
return(100 / input$num)
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num", "Enter a number")),
mainPanel(
bsAlert("alert"),
textOutput("exampleOutput")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
num <- as.numeric(input$num)
print(num)
if(!is.numeric(num)) {
createAlert(session, "alert", title = "Oops", content = "You must enter a number", style = "danger", append = FALSE)
} else if(num == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.", style = "danger", append = FALSE)
} else {
return(100 / input$num)
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num", "Enter a number")),
mainPanel(
bsAlert("alert"),
textOutput("exampleOutput")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
print(input$num)
num <- as.numeric(input$num)
print(num)
if(!is.na(num)) {
createAlert(session, "alert", title = "Oops", content = "You must enter a number", style = "danger", append = FALSE)
} else if(num == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.", style = "danger", append = FALSE)
} else {
return(100 / input$num)
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num1", NULL, value = 100), "divided by", textInput("num2", NULL, value = 20), "equals", textOutput("exampleOutput")),
mainPanel(
bsAlert("alert")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
if(input$num != "") {
num <- as.numeric(input$num)
print(num)
if(!is.na(num)) {
createAlert(session, "alert", title = "Oops", content = "You must enter a number", style = "danger", append = FALSE)
} else if(num == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.", style = "danger", append = FALSE)
} else {
return(100 / input$num)
}
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num1", NULL, value = 100), "divided by", textInput("num2", NULL, value = 20), "equals", textOutput("exampleOutput")),
mainPanel(
bsAlert("alert")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
num1 <- input$num1
num2 <- input$num2
if(is.na(as.numeric(num1)) | is.na(as.numeric(num2))) {
createAlert(session, "alert", title = "Oops", content = "Both inputs should be numeric.")
} else if(num2 == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.")
} else {
return(num1/num2)
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num1", NULL, value = 100), "divided by", textInput("num2", NULL, value = 20), "equals", textOutput("exampleOutput")),
mainPanel(
bsAlert("alert")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
if(is.na(num1) | is.na(num2)) {
createAlert(session, "alert", title = "Oops", content = "Both inputs should be numeric.")
} else if(num2 == 0) {
createAlert(session, "alert", title = "Oops", content = "You cannot divide by 0.")
} else {
return(num1/num2)
}
})
}
)
shiny::shinyApp(
onStart = function() {library(shinyBS)},
ui = fluidPage(
sidebarLayout(
sidebarPanel(textInput("num1", NULL, value = 100), "divided by", textInput("num2", NULL, value = 20), "equals", textOutput("exampleOutput")),
mainPanel(
bsAlert("alert")
)
)
),
server = function(input, output, session) {
output$exampleOutput <- renderText({
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
if(is.na(num1) | is.na(num2)) {
createAlert(session, "alert", "exampleAlert", title = "Oops", content = "Both inputs should be numeric.", append = FALSE)
} else if(num2 == 0) {
createAlert(session, "alert", "exampleAlert", title = "Oops", content = "You cannot divide by 0.", append = FALSE)
} else {
closeAlert(session, "exampleAlert")
return(num1/num2)
}
})
}
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
