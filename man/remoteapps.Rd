% Generated by roxygen2 (4.0.1): do not edit by hand
\name{Remote Shiny Apps}
\alias{Remote Shiny Apps}
\alias{close.rApp}
\alias{closeRemoteApp}
\alias{runRemoteApp}
\title{Run shiny apps in seperate processes}
\usage{
runRemoteApp(appDir = getwd(), launch.browser = TRUE, ...)

\method{close}{rApp}(con, ...)

closeRemoteApp(rApp)
}
\arguments{
\item{appDir}{The directory of the application}

\item{launch.browser}{Logical indicating whether the default browser should be
automatically opened.}

\item{\dots}{Represents other options to pass to \link{runApp}}

\item{rApp,con}{The object created by runRemoteApp. Used to close the app
 afterwards}
}
\description{
Open a shiny app in a seperate R processes (probably Windows
 Only)
}
\details{
These functions were created to assist in testing with the testthat
 and RSelenium packages. This allows the shiny test apps to be opened in a
 seperate process so the main process can be used by testthat.

 The function opens an instance of Rscript.exe and opens a socket to that
 process. Based roughly on how the snow package opens additional instances
 for parallel processing.

 This may be useful if you need to run a shiny app but still want to be able
 use R.

 When using \code{runRemoteApp} you should always assign the output of the
 function to a variable. You will need this variable to close the remote
 process after you are done with the app. Otherwise the app will continue
 running in the background even after the browser is closed.
}
\examples{
\dontrun{
## Open an app on a seperate process
app <- runRemoteApp()

## Close the remote app
closeRemoteApp(app)
}
}
\author{
Eric Bailey
}
\seealso{
Other shinyBS_utilities: \code{\link{bsDemo}},
  \code{\link{demos}}
}

